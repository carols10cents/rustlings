use std::fs;

use serde::Serialize;
use toml;

use crate::exercise::Exercise;

pub fn update(exercise: &Exercise, root: Option<&str>) {
    let root = if let Some(root) = root {
        root
    } else {
        return;
    };

    let path = exercise
        .path
        .strip_prefix(root)
        .expect("Invalid path outside of root")
        .to_string_lossy()
        .to_string();

    let target = Target {
        name: exercise.name.clone(),
        path,
    };

    let (bins, lib) = if exercise.is_binary() {
        (Some(vec![target]), None)
    } else {
        (None, Some(target))
    };

    let manifest = Manifest {
        package: Package {
            name: "exercises",
            version: "0.1.0",
            authors: &["The Rustlings Maintainers"],
            edition: "2018",
            publish: false,
        },
        bin: bins,
        lib,
    };

    let source = format!(
        "# This Cargo.toml is AUTOGENERATED, you shouldn't need to edit it.\n\
         # The `rustling` commands do not rely on this manifest at all, its only purpose\n\
         # is to help editors analyze your code.\n\
         {}",
        toml::ser::to_string_pretty(&manifest).expect("Invalid toml")
    );

    fs::write(format!("{}/Cargo.toml", root), source).expect("Unable to update manifest")
}

#[derive(Serialize)]
struct Manifest {
    package: Package,
    bin: Option<Vec<Target>>,
    lib: Option<Target>,
}

#[derive(Serialize)]
struct Package {
    name: &'static str,
    version: &'static str,
    edition: &'static str,
    authors: &'static [&'static str],
    publish: bool,
}

#[derive(Serialize)]
struct Target {
    name: String,
    path: String,
}
